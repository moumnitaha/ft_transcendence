
FROM node:22-alpine3.18


WORKDIR /frontend/


COPY package*.json /frontend/


RUN npm install 

RUN npm install -g pm2


COPY . /frontend/

# RUN chmod +x set_env.sh
# RUN ./set_env.sh

RUN npm run build


# Start your application with pm2
# CMD ["pm2-runtime", "start", "npm", "--", "start"]

# Keep container running (optional, if you want to use tail -f /dev/null)
CMD [ "pm2-runtime", "npm", "--", "start" ]

# using staged builds
# FROM node:18-buster as builder
# # make the directory where the project files will be stored
# RUN mkdir -p /usr/src/next-nginx
# # set it as the working directory so that we don't need to keep referencing it
# WORKDIR /usr/src/next-nginx
# # Copy the package.json file
# COPY package.json package.json
# # install project dependencies
# RUN npm install
# # copy project files 
# # make sure to set up .dockerignore to copy only necessary files
# COPY . .
# # run the build command which will build and export html files
# RUN  npm run build

# #RUN npm i pm2

# #RUN  npm run export


# # bundle static assets with nginx
# FROM nginx:1.21.0-alpine as production

# # remove existing files from nginx directory
# RUN rm -rf /usr/share/nginx/html/*
# # copy built assets from 'builder' stage
# COPY --from=builder /usr/src/next-nginx/out/  /usr/share/nginx/html
# # add nginx config
# RUN chmod 777  /usr/share/nginx/html
# COPY ./conf/nginx.conf /etc/nginx/conf.d/default.conf
# RUN chmod 777  /etc/nginx/conf.d/default.conf
# # expose port 80 for nginx
# EXPOSE 80
# # start nginx
# CMD ["nginx", "-g", "daemon off;"]